{"version":3,"sources":["components/Navbar.js","logic/operate.js","components/Calculator.jsx","logic/calculate.js","components/Home.js","components/Quote.js","App.js","index.js"],"names":["Navbar","className","to","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","next","state","setState","handleKeyPress","event","obj","buttonName","calculator","target","textContent","match","includes","parseFloat","role","map","keys","key","type","onClick","Home","Quote","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e85f8030.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <header className=\"header\">\n    <nav className=\"navbar flex-center\">\n      <div className=\"header-title\">\n        <h1>\n          Math\n          <span> magicians </span>\n        </h1>\n      </div>\n      <ul className=\"flex-center\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-item-link active\" to=\"/\">\n            Home\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-item-link\" to=\"/calculator\">\n            Calculator\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-item-link\" to=\"/quote\">\n            Quotes\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  </header>\n);\nexport default Navbar;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: 0,\n    next: '',\n    operation: '',\n  });\n\n  const keyBtns = [\n    ['AC', '+/-', '%', 'รท'],\n    ['7', '8', '9', 'x'],\n    ['4', '5', '6', '-'],\n    ['1', '2', '3', '+'],\n    ['0', '.', '='],\n  ];\n\n  //  handleKeyPress = (event) => this.setState((obj) => calculate(obj, event.target.textContent));\n  const handleKeyPress = (event) => {\n    const calculator = calculate(state, event.target.textContent);\n    setState({ ...state, ...calculator });\n  };\n\n  return (\n    <div className=\" section flex-center\">\n      <h2 className=\"second-title\">\n        Let&apos;s do some Math\n        <span>!</span>\n      </h2>\n      <section className=\"calculator-section\">\n        <div className=\"flex-center result\">\n          <div className=\"input\" role=\"none\">\n            {state.total}\n            {state.operation}\n            {state.next}\n          </div>\n        </div>\n        <ul className=\"items-container\">\n          {keyBtns.map((keys) => (\n            <li className=\"flex-center keyItem\" key={keys}>\n              {keys.map((key) => (\n                <button\n                  className=\"btn\"\n                  type=\"button\"\n                  onClick={handleKeyPress}\n                  key={key}\n                >\n                  {key}\n                </button>\n              ))}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n};\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\n\nconst Home = () => (\n  <section className=\"home-section\">\n    <h2 className=\"second-title\">\n      Welcome To The Best\n      <span className=\"second-title\"> Calculator </span>\n      In The world!\n    </h2>\n    <div className=\"paragraph\">\n      <p>\n        Calculators have not only greatly enhanced our ability to perform the regular\n        computations that are involved in everyday life, but provided humans with the ability\n        to understand mathematics on a greater scale than ever imagined.\n      </p>\n      <p className=\"show\">\n        This technology allows students solve complicated problems quickly and in an efficient\n        manner Students can develop fluency and mental math skills without a calculator.\n      </p>\n    </div>\n    <button className=\"btn-more\" type=\"button\">Read More</button>\n  </section>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst Quote = () => (\n  <section className=\"quote-section\">\n    <p className=\"\">\n      Without calculators, advanced math courses,\n      such as Calculus, would require much longer class-times and reformatted lesson plans.\n      Calculators, when used alongside a comprehensive mathematics curriculum,\n      increase the quality and quantity of student learning.\n    </p>\n  </section>\n);\n\nexport default Quote;\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Calculator from './components/Calculator';\nimport Home from './components/Home';\nimport Quote from './components/Quote';\n\nimport './css/App.css';\n\nconst App = () => (\n  <Router>\n    <Navbar />\n    <main className=\"container\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/Calculator\">\n          <Calculator />\n        </Route>\n        <Route path=\"/Quote\">\n          <Quote />\n        </Route>\n      </Switch>\n    </main>\n  </Router>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}